import React from 'react';
import { 
  ArrowUturnLeftIcon,
  DocumentIcon,
  ArrowDownTrayIcon,
  FolderIcon,
  CalendarIcon
} from '@heroicons/react/24/outline';
import { useChat } from '../../context/ChatContext';
import { format, isToday, isYesterday, startOfDay } from 'date-fns';
import { useLanguage } from '../../context/LanguageContext';

interface FilesSidebarProps {
  isOpen: boolean;
  onToggle: () => void;
}

export const FilesSidebar: React.FC<FilesSidebarProps> = ({ isOpen, onToggle }) => {
  const { files } = useChat();
  const { t, formatDate, formatTime } = useLanguage();

  // Group files by date
  const groupedFiles = files.reduce((groups, file) => {
    const dateKey = format(startOfDay(file.createdAt), 'yyyy-MM-dd');
    if (!groups[dateKey]) {
      groups[dateKey] = [];
    }
    groups[dateKey].push(file);
    return groups;
  }, {} as Record<string, typeof files>);

  const getDateLabel = (dateStr: string) => {
    const date = new Date(dateStr);
    if (isToday(date)) return t('date.today') || 'Today';
    if (isYesterday(date)) return t('date.yesterday') || 'Yesterday';
    
    // For non-recent dates, use appropriate format based on language
    const longFormat = formatDate(date, 'long');
    // Vietnamese: "Thứ Sáu, 15/08/2025" -> take part after first comma
    // English: "Friday, August 15, 2025" -> take everything after first comma
    return longFormat.split(', ').slice(1).join(', ');
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getFileIcon = (type: string) => {
    if (type.includes('image')) return '🖼️';
    if (type.includes('pdf')) return '📄';
    if (type.includes('document') || type.includes('word')) return '📝';
    if (type.includes('spreadsheet') || type.includes('excel')) return '📊';
    if (type.includes('presentation') || type.includes('powerpoint')) return '📋';
    return '📁';
  };

  return (
    <>
      {/* Mobile backdrop */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-transparent backdrop-blur-sm z-20 lg:hidden"
          onClick={onToggle}
        />
      )}
      
      {/* Sidebar */}
      <div className={`
        fixed inset-y-0 right-0 z-30 w-80 transform transition-transform duration-300 ease-in-out
        lg:relative lg:block
        ${isOpen ? 'translate-x-0' : 'translate-x-full lg:hidden'}
      `}
      style={{
        backgroundColor: '#27403E'
      }}
      >
        <div className="flex flex-col h-full">
          {/* Header (aligned) */}
          <div className="flex items-center justify-between h-16 px-4"
            style={{ backgroundColor: '#1a322e' }}
          >
            <div className="flex items-center space-x-2">
              <FolderIcon className="h-5 w-5" style={{ color: '#FFFFFF' }} />
              <h2 className="text-lg font-semibold tracking-tight" style={{ color: '#FFFFFF' }}>{t('sidebar.generated_files')}</h2>
            </div>
            <button
              onClick={onToggle}
              className="p-2 rounded-lg transition-colors"
              style={{ color: '#FFFFFF' }}
              onMouseEnter={(e) => {
                e.currentTarget.style.backgroundColor = '#87DF2C';
                e.currentTarget.style.color = '#27403E';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.backgroundColor = 'transparent';
                e.currentTarget.style.color = '#FFFFFF';
              }}
            >
              <ArrowUturnLeftIcon className="h-5 w-5" />
            </button>
          </div>

          {/* Files List */}
          <div className="flex-1 overflow-y-auto">
            {Object.keys(groupedFiles).length === 0 ? (
              <div className="flex flex-col items-center justify-center h-full text-center p-6">
                <DocumentIcon className="h-12 w-12 mb-4" style={{ color: '#FFFFFF' }} />
                <h3 className="text-lg font-medium mb-2" style={{ color: '#27403E' }}>No files yet</h3>
                <p className="text-sm" style={{ color: '#27403E' }}>
                  Files generated by the AI will appear here
                </p>
              </div>
            ) : (
              <div className="p-4 space-y-6">
                {Object.entries(groupedFiles)
                  .sort(([a], [b]) => new Date(b).getTime() - new Date(a).getTime())
                  .map(([dateKey, dateFiles]) => (
                    <div key={dateKey}>
                      <div className="flex items-center space-x-2 mb-3">
                        <CalendarIcon className="h-4 w-4" style={{ color: '#87DF2C' }} />
                        <h3 className="text-sm font-medium" style={{ color: '#ffffff' }}>
                          {getDateLabel(dateKey)}
                        </h3>
                      </div>
                      <div className="space-y-2">
                        {dateFiles
                          .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())
                          .map((file) => (
                            <div
                              key={file.id}
                              className="group flex items-center justify-between p-3 border rounded-lg transition-colors cursor-pointer shadow-sm"
                              style={{
                                backgroundColor: '#FFFFFF',
                                borderColor: '#21A691'
                              }}
                              onMouseEnter={(e) => {
                                e.currentTarget.style.backgroundColor = '#21A691';
                                e.currentTarget.style.borderColor = '#87DF2C';
                              }}
                              onMouseLeave={(e) => {
                                e.currentTarget.style.backgroundColor = '#FFFFFF';
                                e.currentTarget.style.borderColor = '#21A691';
                              }}
                            >
                              <div className="flex items-center space-x-3 flex-1 min-w-0">
                                <span className="text-lg">
                                  {getFileIcon(file.type)}
                                </span>
                                <div className="flex-1 min-w-0">
                                  <p className="text-sm font-medium truncate" style={{ color: '#27403E' }}>
                                    {file.name}
                                  </p>
                                  <div className="flex items-center space-x-2 text-xs" style={{ color: '#000000' }}>
                                    <span>{formatFileSize(file.size)}</span>
                                    <span>•</span>
                                    <span>{formatTime(file.createdAt)}</span>
                                  </div>
                                </div>
                              </div>
                              <button
                                onClick={() => {
                                  // Download file
                                  const link = document.createElement('a');
                                  link.href = file.url;
                                  link.download = file.name;
                                  link.click();
                                }}
                                className="group-hover:opacity-100 p-1"
                                style={{ color: '#000000' }}
                                onMouseEnter={(e) => {
                                  e.currentTarget.style.color = '#87DF2C';
                                }}
                                onMouseLeave={(e) => {
                                  e.currentTarget.style.color = '#000000';
                                }}
                                title="Download file"
                              >
                                <ArrowDownTrayIcon className="h-4 w-4" />
                              </button>
                            </div>
                          ))}
                      </div>
                    </div>
                  ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
};
